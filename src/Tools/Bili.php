<?php
declare (strict_types=1);

namespace Wzj\ShortVideoParse\Tools;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use Wzj\ShortVideoParse\Enumerates\BiliQualityType;
use Wzj\ShortVideoParse\Exception\ErrorAuthException;
use Wzj\ShortVideoParse\Interfaces\IVideo;

/**
 * B站解析
 * @link 参考：https://lxb007981.github.io/bilibili-API-collect/video/videostream_url.html#%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E6%B5%81url-web%E7%AB%AF
 */
class Bili extends Base implements IVideo
{

    private $url = '';

    /**
     * @var string
     */
    private $cookie = '';
    private $quality = BiliQualityType::LEVEL_2;

    /**
     * 更新时间：2020/7/31
     * 暂时还没修复完整
     * @param string $url
     * @return array
     */
    public function start(string $url): array
    {
        $this->url = $url;
        return $this->execution();
    }

    /**
     * 更新时间：2020/6/10
     * @return array
     */
    public function execution(): array
    {
        $this->make();
        $this->logic->setOriginalUrl($this->url);
        $this->logic->init($this->getCookie(), $this->getQuality());
        $this->logic->checkUrlHasTrue();
        $this->logic->setAidAndCid();
        $this->logic->setContents();
        return $this->exportData();
    }

    /**
     * 设置cookie
     * @param string $cookie
     * @return $this
     */
    public function setCookie(string $cookie = ''): self
    {
        $this->cookie = $cookie;
        return $this;
    }

    /**
     * @return string
     */
    public function getCookie(): string
    {
        return $this->cookie;
    }

    /**
     * 清晰度
     * @param mixed $quality
     * @return Bili
     */
    public function setQuality(int $quality = BiliQualityType::LEVEL_5): Bili
    {
        $this->quality = $quality;
        return $this;
    }

    /**
     * @return int
     */
    public function getQuality(): int
    {
        return $this->quality;
    }

    /**
     * 设置URL
     * @param mixed $url
     * @return Bili
     */
    public function setUrl(string $url): Bili
    {
        $this->url = $url;
        return $this;
    }


    protected function exportData(): array
    {
        $data = parent::exportData(); // TODO: Change the autogenerated stub
        $data['images'] = empty($data['video_url']) ? $this->logic->getImages() : [];

        return $data;
    }

    /**
     * 申请二维码URL及扫码密钥
     * @param array $params
     * @return array|mixed|string|void|null
     * @throws ErrorAuthException
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function makeQrcodeLoginUrl(array $params = [])
    {
        try {
            $client = new Client();
            $response = $client->get('http://passport.bilibili.com/qrcode/getLoginUrl', [
                'headers' => [
                    'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36'
                ]
            ]);
            $contents = $response->getBody()->getContents();
            $data = json_decode($contents, true);
            if (!empty($data) && $data['code'] === 0) {
                return $data['data'];
            }
            throw new ErrorAuthException("未返回需要的参数");
        } catch (ClientException $e) {
            throw new ErrorAuthException("申请二维码URL及扫码密钥失败，" . $e->getMessage());
        }

        return '';
    }

    /**
     * B站登录检测
     *   状态码
     *     86090: 二维码已扫码未确认
     *     86101: 未扫码
     *     0: 扫码确认
     *     86038: 二维码已失效
     * @param array $params
     * @return array
     * @throws ErrorAuthException
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function qrcodeLogin(array $params = [])
    {
        if (empty($params['oauthKey'])) {
            throw new ErrorAuthException("oauthKey参数为空");
        }

        empty($params['gourl']) && $params['gourl'] = 'https://www.bilibili.com';
        $client = new Client();
        $response = $client->get('https://passport.bilibili.com/x/passport-login/web/qrcode/poll', [
            'query' => [
                'qrcode_key' => $params['oauthKey'],
                'source' => 'main-fe-header'
            ],
            'headers' => [
                'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36'
            ]
        ]);

        $cookies = $response->getHeaderLine('set-Cookie');
        $contents = $response->getBody()->getContents();
        $data = json_decode($contents, true);
        $cookieStr = '';
        $userInfo = [];
        if ($data['code'] === 0 && !empty($cookies)) {
            // 获取用户信息
            $cookieArray = $this->parseCookies($cookies);
            foreach ($cookieArray as $key => $value) {
                $cookieStr .= $key . '=' . $value . '; ';
            }
            $userInfoContents = $client->get('https://api.bilibili.com/x/web-interface/nav', [
                'headers' => [
                    'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36',
                    'Cookie' => $cookieStr,
                    'referer' => 'https://www.bilibili.com/'
                ]
            ])->getBody()->getContents();
            $userInfoResult = json_decode($userInfoContents, true);
            if ($userInfoResult['code'] === 0) {
                $userInfo = $userInfoResult['data'];
            }
        }
        return [
            'cookies' => $cookieStr,
            'status_info' => $data,
            'user_info' => $userInfo
        ];
    }

    /**
     * 解析Cookie
     * @param $cookieString
     * @return array
     */
    protected function parseCookies($cookieString)
    {
        $cookies = [];
        $cookiePairs = explode(',', $cookieString);
        foreach ($cookiePairs as $cookiePair) {
            $cookiePair = trim($cookiePair);
            $cookieParts = explode('=', $cookiePair, 2);
            if (count($cookieParts) === 2) {
                $value = $cookieParts[1];
                $value = explode(';', $value);
                $cookies[$cookieParts[0]] = urldecode($value[0]);
            }
        }

        return $cookies;
    }
}